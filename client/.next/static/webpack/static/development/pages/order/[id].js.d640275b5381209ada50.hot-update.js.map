{"version":3,"file":"static/webpack/static\\development\\pages\\order\\[id].js.d640275b5381209ada50.hot-update.js","sources":["webpack:///./pages/order/.js"],"sourcesContent":["import { Grid, ImageList, List, ListItem, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from '@material-ui/core';\r\nimport Axios from 'axios';\r\nimport { useRouter } from 'next/router';\r\nimport React, { useContext, useEffect, useReducer, useState } from 'react';\r\nimport { Card, CardBody, CardText, CardTitle, Col, ListGroup, Row, Table } from 'reactstrap';\r\nimport CheckoutSteps from '../../components/CheckoutSteps';\r\nimport MessageBox from '../../components/MessageBox';\r\nimport CommonLayout from '../../containers/common/common-layout';\r\n\r\n \r\nimport { Store } from '../../utils/Store';\r\n\r\nimport { CardElement, useElements, useStripe } from '@stripe/react-stripe-js';\r\n\r\nconst CARD_OPTIONS = {\r\n\ticonStyle: \"solid\",\r\n\tstyle: {\r\n\t\tbase: {\r\n\t\t\ticonColor: \"#c4f0ff\",\r\n\t\t\tcolor: \"#000\",\r\n\t\t\tfontWeight: 500,\r\n\t\t\tfontFamily: \"Roboto, Open Sans, Segoe UI, sans-serif\",\r\n\t\t\tfontSize: \"16px\",\r\n\t\t\tfontSmoothing: \"antialiased\",\r\n\t\t\t\":-webkit-autofill\": { color: \"#fce883\" },\r\n\t\t\t\"::placeholder\": { color: \"#87bbfd\" }\r\n\t\t},\r\n\t\tinvalid: {\r\n\t\t\ticonColor: \"#ffc7ee\",\r\n\t\t\tcolor: \"#ffc7ee\"\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default function OrderScreen() {\r\n  const { state } = useContext(Store);\r\n  const {cart: {cartItems}, userInfo } = state;\r\n  const [success, setSuccess ] = useState(false)\r\n  const stripe = useStripe()\r\n  const elements = useElements()\r\n  var c=2.8;\r\n  console.log(c);\r\n\r\n  const router = useRouter();\r\n    const { id: orderId } = router.query\r\n\r\n    \r\n   /* const {\r\n      cart: { shippingAddress },\r\n      \r\n    } = state;*/\r\n    const [showItem, setShowItem] = useState(false);\r\n    const [ order,setOrder] = useState({});\r\n    \r\n    const [taxPrice,SettaxPrice]=useState();\r\n    const [paymentMethod,SetpaymentMethod]=useState();\r\n    const [shippingAddress,SetshippingAddress]= useState({});\r\n    const [orderItems,SetorderItems]=useState([]);\r\n    const [totalPrice,SettotalPrice]=useState();\r\n    const [itemsPrice,SetitemsPrice]=useState();\r\n    const [shippingPrice,SetshippingPrice]=useState();\r\n    const [isPaid,SetisPaid]=useState();\r\n    const [isDelivered,SetisDelivered]=useState();\r\n    const [deliveredAt,SetdeliveredAt]=useState();\r\n    const [paidAt,SetpaidAt]=useState();\r\n\r\n\r\n\r\n\r\n\r\n    const update = async () => {\r\n      const response = await Axios.put(`http://localhost:5000/orders/${orderId}/pay`, {\r\n         \r\n      }) \r\n      \r\n      if(response.data.success) {\r\n          console.log(\"paid\")\r\n          setSuccess(true)\r\n      }\r\n\r\n  }\r\n  const handleSubmit = async (e) => {\r\n      e.preventDefault()\r\n      const {error, paymentMethod} = await stripe.createPaymentMethod({\r\n          type: \"card\",\r\n          card: elements.getElement(CardElement)\r\n      })\r\n\r\n\r\n   \r\n       console.log(totalPrice);\r\n          const {id} = paymentMethod\r\n          console.log(id)\r\n          const response = await Axios.post(\"http://localhost:5000/orders/payment\", {\r\n              amount: totalPrice*1000,\r\n              id\r\n          })\r\n          update();\r\n\r\n          if(response.data.success) {\r\n              console.log(\"Successful payment\")\r\n              setSuccess(true)\r\n          }\r\n\r\n      \r\n  \r\n}\r\n    \r\n    \r\n    \r\n    \r\n\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    \r\n    const fetchOrder =  () => {\r\n      try {\r\n       \r\n          Axios.get(`http://localhost:5000/orders/${orderId}`, {\r\n          headers: { authorization: `Bearer ${userInfo.token}` },\r\n        }).then( res => {\r\n        \r\n          SettaxPrice(res.data.taxPrice);\r\n          SetpaymentMethod(res.data.paymentMethod);\r\n          SetshippingAddress(res.data.shippingAddress);\r\n          SetorderItems(res.data.orderItems);\r\n          console.log(res.data.orderItems.slug);\r\n          SettotalPrice(res.data.totalPrice);\r\n          SetshippingPrice(res.data.shippingPrice)\r\n          SetitemsPrice(res.data.itemsPrice)\r\n          SetisPaid(res.data.isPaid);\r\n          SetisDelivered(res.data.isDelivered)\r\n          SetdeliveredAt(res.data.deliveredAt)\r\n          SetpaidAt(res.data.paidAt);\r\n         });\r\n        \r\n      } catch (err) {\r\n        \r\n      }\r\n    };\r\n\r\n    if (!userInfo) {\r\n      return alert(\"Go To Sign In\")\r\n    }\r\n    if (!order._id ||\r\n      successPay ||\r\n      successDeliver ||\r\n      (order._id && order._id !== orderId)) {\r\n      fetchOrder();\r\n    }\r\n  }, [userInfo, orderId]);\r\n\r\n  \r\n  return (\r\n    <CommonLayout title={`Order ${orderId}`}>\r\n      <CheckoutSteps activeStep={3}></CheckoutSteps>\r\n      \r\n      <div>\r\n      <Grid container spacing={1}>\r\n          <Grid item md={9} xs={12}>\r\n           <Card>\r\n              <List>\r\n                <ListItem>\r\n                  <Typography component=\"h3\" variant=\"h3\">\r\n                    Shipping Address\r\n                  </Typography>\r\n                </ListItem>\r\n                <ListItem>\r\n                  {shippingAddress.fullName}, {shippingAddress.address},{' '}\r\n                  {shippingAddress.city}, {shippingAddress.postalCode},{' '}\r\n                  {shippingAddress.country}\r\n                </ListItem>\r\n                <ListItem>\r\n                  Status:{' '}\r\n                  {isDelivered\r\n                    ? `delivered at ${deliveredAt}`\r\n                    : 'not delivered'}\r\n                </ListItem>\r\n              </List>\r\n            </Card>\r\n            <Card>\r\n              <List>\r\n                <ListItem>\r\n                  <Typography component=\"h3\" variant=\"h3\">\r\n                    Payment Method\r\n                  </Typography>\r\n                </ListItem>\r\n                <ListItem>{paymentMethod}</ListItem>\r\n                <ListItem>\r\n                  Status: {isPaid ? `paid at ${paidAt}` : 'not paid'}\r\n                </ListItem>\r\n              </List>\r\n            </Card>\r\n            <Card>\r\n              <List>\r\n                <ListItem>\r\n                  <Typography component=\"h2\" variant=\"h2\">\r\n                    Order Items\r\n                  </Typography>\r\n                </ListItem>\r\n                <Card className=\"mb-3\">\r\n            <CardBody>\r\n              <CardTitle>Items</CardTitle>\r\n              <ListGroup variant=\"flush\">\r\n                {orderItems.map((item) => (\r\n                  <ListItem key={item._id}>\r\n                    <Row className=\"align-items-center\">\r\n                      <Col md={6}>\r\n                        <img\r\n                          src={item.image}\r\n                          alt={item.name}\r\n                          className=\"img-fluid rounded img-thumbnail\"\r\n                        ></img>{' '}\r\n                         \r\n                      </Col>\r\n                      <Col md={3}>\r\n                        <span>{item.quantity}</span>\r\n                      </Col>\r\n                      <Col md={3}>${item.price}</Col>\r\n                    </Row>\r\n                  </ListItem>\r\n                ))}\r\n              </ListGroup>\r\n               \r\n            </CardBody>\r\n          </Card>\r\n              </List>\r\n            </Card>\r\n             \r\n            </Grid>\r\n            <Grid item md={3} xs={12}>\r\n            <Card>\r\n              <List>\r\n                <ListItem>\r\n                  <Typography variant=\"h3\">Order Summary</Typography>\r\n                </ListItem>\r\n                <ListItem>\r\n                  <Grid container>\r\n                    <Grid item xs={6}>\r\n                      <Typography>Items Price:</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <Typography align=\"right\">${itemsPrice}</Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                </ListItem>\r\n                <ListItem>\r\n                  <Grid container>\r\n                    <Grid item xs={6}>\r\n                      <Typography>Tax:</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <Typography align=\"right\">${taxPrice}</Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                </ListItem>\r\n                <ListItem>\r\n                  <Grid container>\r\n                    <Grid item xs={6}>\r\n                      <Typography>Shipping:</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <Typography align=\"right\">${shippingPrice}</Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                </ListItem>\r\n                <ListItem>\r\n                  <Grid container>\r\n                    <Grid item xs={6}>\r\n                      <Typography>\r\n                        <strong>Total:</strong>\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <Typography align=\"right\">\r\n                        <strong>${totalPrice}</strong>\r\n                      </Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                </ListItem>\r\n                {showItem ? (\r\n\t\t\t\t<>\r\n        {!success ? \r\n        <form onSubmit={handleSubmit}>\r\n            <fieldset className=\"FormGroup\">\r\n                <div className=\"FormRow\">\r\n                    <CardElement options={CARD_OPTIONS}/>\r\n                </div>\r\n            </fieldset>\r\n            <button>Pay</button>\r\n        </form>\r\n        :\r\n       <div>\r\n           <h2>You just bought a sweet spatula congrats this is the best decision of you're life</h2>\r\n       </div> \r\n        }\r\n            \r\n        </>\r\n\t\t\t) : (\r\n\t\t\t\t<>\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t<button onClick={() => setShowItem(true)}>Go To pay </button>\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n              </List>\r\n            </Card>\r\n          </Grid>\r\n            </Grid>\r\n            </div>\r\n    \r\n  </CommonLayout>\r\n    \r\n  \r\n     \r\n  );\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AARA;AAUA;AACA;AACA;AAFA;AAXA;AAFA;AAoaA;AACA;AAFA;AACA;AAbA;AAYA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAidcA;;;;A","sourceRoot":""}