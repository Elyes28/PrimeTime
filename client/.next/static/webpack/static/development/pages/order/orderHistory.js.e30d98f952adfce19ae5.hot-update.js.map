{"version":3,"file":"static/webpack/static\\development\\pages\\order\\orderHistory.js.e30d98f952adfce19ae5.hot-update.js","sources":["webpack:///./pages/order/orderHistory.js"],"sourcesContent":["import { Button, Grid, List, ListItem, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from \"@material-ui/core\";\r\nimport  Axios from \"axios\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { Alert, Card } from \"reactstrap\";\r\nimport LoadingBox from \"../../components/LoadingBox\";\r\nimport CommonLayout from \"../../containers/common/common-layout\";\r\nimport { Store } from \"../../utils/Store\";\r\nimport useStyles from \"./style\";\r\nimport NextLink from 'next/link';\r\n\r\n\r\nexport default function OrderHistory() {\r\n  const { state } = useContext(Store);\r\n  const {userInfo} = state;\r\n  const classes = useStyles();\r\n  const [orders ,Setorders]=useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n     \r\n     console.log(userInfo._id)\r\n         await Axios.get(\r\n          `http://localhost:5000/orders/mine/`+userInfo._id,\r\n\r\n          ).then( res => {\r\n            console.log(userInfo._id);\r\n            Setorders(res.data);\r\n            console.log(res.data);\r\n            \r\n             \r\n           });\r\n       \r\n      \r\n    };\r\n    fetchData();\r\n    if (!userInfo) {\r\n        return Alert(\"Go To Sign In\")\r\n      }\r\n  }, [userInfo]);\r\n  return (\r\n      <CommonLayout>\r\n     <strong>Order History</strong>\r\n     <Grid item md={9} xs={12}>\r\n          <Card className={classes.section}>\r\n            <List>\r\n               \r\n              <ListItem>\r\n                \r\n                  <TableContainer>\r\n                    <Table>\r\n                      <TableHead>\r\n                        <TableRow>\r\n                          <TableCell>ID</TableCell>\r\n                          <TableCell>DATE</TableCell>\r\n                          <TableCell>TOTAL</TableCell>\r\n                          <TableCell>PAID</TableCell>\r\n                          <TableCell>DELIVERED</TableCell>\r\n                          <TableCell>ACTION</TableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody>\r\n                        {orders.map((order) => (\r\n                          <TableRow key={order._id}>\r\n                            <TableCell>{order._id.substring(20, 24)}</TableCell>\r\n                            <TableCell>{order.createdAt}</TableCell>\r\n                            <TableCell>${order.totalPrice}</TableCell>\r\n                            <TableCell>\r\n                              {order.isPaid\r\n                                ? `paid at ${order.paidAt.split('T')[0]}`\r\n                                : 'not paid'}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              {order.isDelivered\r\n                                ? `delivered at ${order.deliveredAt}`\r\n                                : 'not delivered'}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                            <NextLink href={`/order/${order._id}`} passHref>\r\n                                <Button variant=\"contained\">Details</Button>\r\n                              </NextLink>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        ))}\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                 \r\n              </ListItem>\r\n            </List>\r\n          </Card>\r\n        </Grid>\r\n     </CommonLayout>\r\n\r\n  )\r\n\r\n  \r\n\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAAA;AAOA;AACA;AACA;AAGA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAejBA;AAoCA;;;;A","sourceRoot":""}